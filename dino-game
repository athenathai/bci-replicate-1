Microsoft Windows [Version 10.0.19042.746]
(c) 2020 Microsoft Corporation. All rights reserved.

#this is using CMD.exe prompt from Anaconda 3

pip install muselsl
muselsl list
muselsl stream

conda create -n "eeg-notebooks" python=3.7 git pip
conda activate "eeg-notebooks"

git clone https://github.com/NeuroTechX/eeg-notebooks

pip install -e .
pip install pyautogui
from time import sleep

python
#the rest of the code is from SabeehHassany/museEEG repository on Github

>>> from time import sleep
>>> import pyautogui
>>> from pynput.keyboard import Key, Controller
>>> from pynput.keyboard import Key, Controller
>>> from os import system as sys
>>> from datetime import datetime
>>> import numpy as np
>>> import matplotlib.pyplot as plt
>>> from pylsl import StreamInlet, resolve_byprop
>>> import utils
>>>

>>> class Band:
...  Delta = 0
...  Theta = 1
...  Alpha = 2
...  Beta = 3
...
>>>
>>> """ Experimental Parameters """
' Experimental Parameters '
>>> Buffer_Length = 5
>>> Epoch_Length = 1
>>> Overlap_Length = 0.8
>>> Shift_Length = Epoch_Length - Overlap_Length
>>>
>>>
>>> Index_Channel = [0]
>>>
>>> if __name__ == "__main__":


...  """ 1. Connect to EEG stream """
...  print('Looking for an EEG stream...')
...  streams = resolve_byprop('type', 'EEG', timeout=2)
...  if len(streams) == 0:
...   raise RuntimeError('Can\'t find EEG stream.')
...  print("Start acquiring data")
...  inlet = StreamInlet(streams[0], max_chunklen=12)
...  eeg_time_correction = inlet.time_correction()
...  info = inlet.info()
...  description = info.desc()
...  fs = int(info.nominal_srate())


...  """ 2. Initialize Buffers """
...  eeg_buffer = np.zeros((int(fs * Buffer_Length), 1))
...  filter_state = None
...  n_win_test = int(np.floor((Buffer_Length - Epoch_Length)/Shift_Length + 1))
...  band_buffer = np.zeros((n_win_test, 4))
...  """ 3. Get Data """
...  keyboard = Controller()
...  print('Press Ctrl-C in the console to break the while loop.')
...  try:
...   t = datetime.now()
...   while True:


...    """ 3.1 Acquire Data """
...    eeg_data, timestamp = inlet.pull_chunk(
...     timeout=1, max_samples=int(Shift_Length * fs))
...    ch_data = np.array(eeg_data)[:, Index_Channel]
...    eeg_buffer, filter_state = utils.update_buffer(
...     eeg_buffer, ch_data, notch=True,
...     filter_state=filter_state)

...    """ 3.2 Compute Band Powers """
...    data_epoch = utils.get_last_data(eeg_buffer, Epoch_Length * fs)
...    band_powers = utils.compute_band_powers(data_epoch, fs)
...    band_buffer, _ = utils.update_buffer(band_buffer, np.asarray([band_powers]))
...    smooth_band_powers = np.mean(band_buffer, axis=0)
...    print('Delta: ', band_powers[Band.Delta], ' Theta: ', band_powers[Band,Theta], ' Alpha: ', band_powers[Band.Alpha], ' Beta: ', band_powers[Band,Beta])

...    """ 3.3 Compute Neurofeedback Metrics """
...    if band_powers[Band,Delta] > 1 and  band_powers[Band.Theta] > 1 and band_powers[Band.Alpha] > 1:
...     print(""" blink """)
...     pyautogui.press('space')
...

>>> if KeyboardInterrupt:
...  print('Closing')

